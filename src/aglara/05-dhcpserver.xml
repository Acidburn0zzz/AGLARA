<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="network" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Network services</title>

  <section>
    <title>Structuring the environment</title>

    <para>The larger an environment is, the more complex it might seem to
    position services left or right. A new workstation needs to be put inside
    a network segment (which one?), possibly assigned to a central LDAP server
    and structure (which tree in the LDAP?). Servers could be for one customer
    or another. Having a high-level structure for positioning components
    provides a quick way of dealing with more general requirements: allowed
    data flows, location of the central user repository and more. But most
    importantly, it provides a structure in which security measurements can be
    positioned.</para>

    <para>In an attempt to structure services in a large, hypothetical
    company, the following hierarchy is used:</para>

    <orderedlist>
      <listitem>
        <para>Tenants (for who are the services meant)</para>
      </listitem>

      <listitem>
        <para>Service level (what are the SLAs on the environment)</para>
      </listitem>

      <listitem>
        <para>Architectural position (is it a gateway in front of a mid-tier
        system or a back-end service)</para>
      </listitem>

      <listitem>
        <para>Category (used to further disseminate accesses between similarly
        positioned services, often based on the user groups)</para>
      </listitem>
    </orderedlist>

    <para/>

    <section>
      <title>Multi-tenancy</title>

      <para>In a multi-tenant organization, several larger customers (be it
      internal or not) are identified. Each of these customers probably has
      very different requirements and might take risks in their architecture
      that other tenants won't. For this reason alone, differentiation between
      tenants is at the highest level (the most segregated level).</para>

      <figure>
        <title>Multi-tenant setup</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-tenants.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The most important part here is that anything used within a tenant
      that might be shared across tenants (such as user ids for
      administration) is <emphasis>pushed</emphasis> to the tenant, never used
      directly from the tenant hub. This provides a clean, modular approach to
      handling tenants. When a tenant wants to leave the organization, the
      data flow is stopped and the tenant can continue with its internal
      architecture (with little to no immediate adaptations). When a new
      tenant enters the organization, data is pushed and converted towards
      that tenants' internal services.</para>

      <para>Communication between the tenants directly should be done through
      the external gateways as it is seen as <emphasis>B2B (Business to
      Business)</emphasis> communication.</para>
    </section>

    <section>
      <title>SLA groups</title>

      <para>Larger environments will have different SLA groups. Those could be
      called "production", "preproduction", "testing" and "sandbox" for
      instance. Smaller organizations might have just two, or even one SLA
      group.</para>

      <figure>
        <title>SLA group structure</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-sla-groups.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The segregation between the SLA groups not only makes proper
      service level agreements possible on the various services, but also
      controls communication flows between these SLA groups.</para>

      <para>For instance, communication of data between production and
      pre-production might be possible, but has to be governed through the
      proper gateways or control points. In the above figure, the SLA groups
      are layered so direct communication between production and sandbox
      should not be possible unless through the three gateway levels. However,
      that is definitely not a mandatory setup.</para>

      <para>To properly design such SLA groups, make sure communication flows
      in either direction (which not only includes synchronous communication,
      but also file transfers and such) are properly documented and
      checked.</para>
    </section>

    <section>
      <title>Architectural positioning</title>

      <para>The next differentiator is the architectural positioning. This
      gives a high-level overview of the various IT services provided by an
      organization.</para>

      <figure>
        <title>Architectural positioning</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-architecture.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>At this level, specific data flows are already denied (for
      instance, direct access from DMZ to the processing block). Communication
      between blocks will still be managed through the next level, which is
      the categorization.</para>

      <note>
        <para>Certain flows will also depend on the SLA group. For instance,
        it might be possible that internet access (towards DMZ) will only be
        allowed for sandbox and production. And that communication to/from mid
        tier blocks are only allowed within the same SLA group.</para>
      </note>
    </section>

    <section>
      <title>Categories</title>

      <para>Finally, categories allow for proper flow and communication
      management between individual blocks. Let's consider end user device
      communication:</para>

      <figure>
        <title>Example categorization for end user devices, internal
        workstations</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-categories.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Blocks are not mutually exclusive. For instance, an employees
      workstation can be both in the network administration and infrastructure
      administration block if it is multi-homed.</para>

      <para>Categories are often made based on the users accessing a system.
      For instance, for mid tier application servers, we could have categories
      for Internet disclosed applications, internal applications,
      authenticated customer applications, business-to-business (B2B)
      applications, etc. Segregation between those categories helps reduce the
      risk involved with a potential breach.</para>

      <para>Once categories on all architecture blocks are known, then a good
      IP map, with firewall rules and segmentation can be defined.</para>
    </section>
  </section>

  <section>
    <title>DNS</title>

    <para>So with the structure (and thus network/IP map) in place the first
    component up is DNS<indexterm>
        <primary>DNS</primary>
      </indexterm>.</para>

    <para>DNS, or <emphasis>Domain Name System</emphasis><indexterm>
        <primary>Domain Name System</primary>
      </indexterm>, allows resources on the network to be reachable through a
    human-readable name rather than an obscure ID that is useful for computers
    and routers. To support human-readable names, a DNS service is positioned
    which helps in translating these domain names onto IP addresses and vice
    versa. But next to the name resolving, DNS infrastructure is also
    positioned for various other purposes.</para>

    <figure>
      <title>DNS services</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/03-dnsservice.png" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>For instance, a mail client can interact with the DNS server of a
    domain to find out where to send e-mails to that are meant for that
    domain. This information is stored in the MX records of that domain.
    Recently, standards are emerging to counter e-mail spoofing, like SPF
    (<emphasis>Sender Policy Framework</emphasis><indexterm>
        <primary>Sender Policy Framework</primary>
      </indexterm>) and DKIM<indexterm>
        <primary>DKIM</primary>
      </indexterm> (<emphasis>DomainKey Identified Mail</emphasis><indexterm>
        <primary>DomainKey Identified Mail</primary>
      </indexterm>). In case of SPF<indexterm>
        <primary>SPF</primary>
      </indexterm>, a DNS record tells whoever asks it which (IP) addresses
    are allowed to be sending e-mail that seems to originate from its domain.
    Mail servers will then check this record to see if an incoming e-mail
    indeed comes from this location and if not, can reject the e-mail. DKIM on
    the other hand uses digital signatures in the mail itself, where the mail
    servers then check the signature based on the public key that is stored in
    a DNS record of the domain that the mail seems to originate from.</para>

    <para>Another example of a service offered by DNS is documenting the SSH
    finger print of servers. SSH fingerprints are cryptographic hashes of the
    public key (and some additional information about it) used by the SSH
    service of a particular server. This fingerprint can then be added to the
    DNS server, and users that connect to an SSH server can verify if the
    fingerprint they receive is indeed the one expected to be from that
    server. If not, then they might be connecting to a malicious
    server.</para>

    <para>Having a well performing DNS architecture is extremely important as
    many services will rely on DNS to know how to contact other resources:
    although it is perfectly possible to use IP-only configurations, this is a
    lot less flexible and less transparent - and with IPv6 this will become
    even more difficult. Because of that, DNS must definitely be high
    available. Depending on the size and use, DNS caching daemons can be
    positioned across the network.</para>

    <figure>
      <title>Simple DNS architecture</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/03-dns-highlevel.png" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the above architecture, two DNS servers are positioned (most
    likely in the DMZ) set up in a high-available manner (where a slave system
    pulls in changes from a master), and two internally with a similar setup.
    The distinction between the DMZ and the internal ones is that the internal
    DNS servers will host a lot more information needed for the internal
    components, whereas the ones on the DMZ only contain information for the
    publicly available services.</para>

    <para>In both cases (DMZ and internal), a configuration management
    database is responsible for providing the addresses and names.</para>
  </section>

  <section>
    <title>Architecture</title>

    <para>Many organizations will host their own domain name servers, and
    perhaps have a third one outside their premises as a fall-back. In this
    reference architecture, BIND is used as the DNS software of choice. Name
    servers such as BIND structure their contents in
    <emphasis>zones</emphasis><indexterm>
        <primary>zones</primary>
      </indexterm>. A zone is a set of IP addresses, hostnames and affiliated
    information, most often for one domain. So genfic.com is one domain (one
    zone) whereas internal.genfic.com is another domain (zone).</para>

    <section>
      <title>Flows and feeds</title>

      <para>Within the DNS server setup, the following flows are
      defined:</para>

      <itemizedlist>
        <listitem>
          <para>zone transfer flow</para>
        </listitem>

        <listitem>
          <para>zone configuration</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Flows and feeds</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-bind-flow.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Zone transfer flow</title>

        <para>The zone transfers are to update the slave(s).</para>
      </section>

      <section>
        <title>Zone configuration</title>

        <para>Updates on the zones themselves are triggered through the
        configuration management service, where new (or to be deleted) zones
        are created and then uploaded towards the name server.</para>
      </section>
    </section>

    <section>
      <title>Administration</title>

      <para>Administration of the DNS server is done through the configuration
      management service (Puppet) and manual operations (SSH).</para>

      <figure>
        <title>BIND administration</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-bind-admin.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The configuration for the server (and BIND) is first pulled from
      the configuration management repository (through a <command>git
      pull</command>, most likely scheduled or triggered by the administrator)
      after which the (re)configuration of BIND is done. This results in
      updates on the <filename>named.conf</filename><indexterm>
          <primary>named.conf</primary>
        </indexterm> file. The <command>rndc</command><indexterm>
          <primary>rndc</primary>
        </indexterm> command is used to interact with the
      <command>named</command> daemon itself.</para>
    </section>

    <section>
      <title>Monitoring</title>

      <para>The monitors for BIND should do at least the following
      checks:</para>

      <itemizedlist>
        <listitem>
          <para>See if the processes are running (and bound on a reachable
          interface)</para>
        </listitem>

        <listitem>
          <para>See if there are any errors mentioned in the logs</para>
        </listitem>

        <listitem>
          <para>See if the named server returns proper records (check on
          various types, DNSSEC info, etc.)</para>
        </listitem>

        <listitem>
          <para>See if the serial of the master and slave is the same</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>BIND monitoring</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-bind-monitoring.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Process running and bound</title>

        <para>Checking if processes are running is a primitive check, but
        quite important to troubleshoot potential failures. The check should
        also include validation that the processes are bound on reachable
        interfaces - a named daemon that only runs on localhost is not
        reachable through the network.</para>
      </section>

      <section>
        <title>Errors in logs</title>

        <para>Validate that there are no errors in the logs, and assign proper
        procedures when certain, well-known errors occur.</para>
      </section>

      <section>
        <title>Record retrieval</title>

        <para>On a remote system, <command>dig</command> can be used to
        retrieve a set of records and validate that the return value is
        correct (and perhaps also within the time boundaries).</para>
      </section>

      <section>
        <title>Serial validation</title>

        <para>The serial (which is the version of the zone files) should be
        the same on the master and slave. If this is not the case, the monitor
        should check with the previous state (master and slave are allowed to
        be not synchronized for a very short while) and if that previous state
        was also showing differences in serial version, then an alert should
        be raised that the zone transfer between master and slave is most
        likely not working.</para>
      </section>
    </section>

    <section>
      <title>Operations</title>

      <para>When running, BIND is a fairly simple daemon from an architectural
      point of view.</para>

      <figure>
        <title>Standard operation usage of BIND</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-bind-operations.png" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Network-wise, it interacts with two other services: other BIND
      servers (for zone transfers) and with standard clients (for querying the
      DNS records).</para>

      <para>On the system, the interaction is mainly with the system logger
      (over a socket). The resources that the named daemon uses are its
      configuration (and cryptographic keys if applicable) and its zone
      files.</para>
    </section>

    <section>
      <title>Users</title>

      <para>DNS services are, by default, anonymous services. Some access
      controls are often placed to restrict who can (from a network point of
      view) query the DNS service or send/receive data from (in case of pull
      requests/zone transfers), and more tight access controls (like shared
      keys) can be used to further authenticate such activities. However, real
      "users" are not known in the BIND setup.</para>

      <para>That being said, the SELinux policy for BIND does provide an
      administrative interface, supporting the definition of roles that are
      allowed to administer a BIND environment without granting those users
      full administrative access on the system. The interface is called
      <interfacename>bind_admin</interfacename> and takes two arguments: the
      user domain allowed access and its role.</para>

      <programlisting>bind_admin(&lt;userdomain&gt;, &lt;userrole&gt;)</programlisting>
    </section>

    <section>
      <title>Security</title>

      <para>DNS services are widely available and are a high-profile target
      for hackers and malicious persons or organizations. If someone could
      change the DNS records for a domain, then it can have users visit
      different sites (which are made to look like the official site) which
      might allow the perpetrator to get access to authentication credentials,
      confidential information and more. He only needs to modify the IP
      address replies that the DNS server would give and have them point to
      its own website. This is called DNS hijacking, and does not only
      introduce the risk of "spoofed websites", but also changes in e-mail
      flows (for instance, the malicious user changes the MX records to point
      to his own e-mail server so he can watch and even modify e-mail
      communication to the official domain).</para>

      <para>To provide some level of protection against these threats, a
      number of security changes are recommended:</para>

      <itemizedlist>
        <listitem>
          <para>If the registrar supports DNSSEC<indexterm>
              <primary>DNSSEC</primary>
            </indexterm>, then enable DNSSEC on the zones as well. With
          DNSSEC, the resource records in the zone are digitally signed (by
          private keys) and that key is signed by the parent domain (hence the
          need for the registrar and higher-level domains to support it
          too).</para>

          <para>This provides some additional protection against DNS
          hijacking, although it is not perfect (end users must use DNSSEC for
          their lookups and should have a valid trusted keystore containing
          the root DNS server keys).</para>
        </listitem>

        <listitem>
          <para>Enable SPF (Sender Policy Framework) so that mail servers who
          receive an e-mail that is supposed to be sent by the official
          locations (or someone within the environment), then the mail server
          can check the origin address against the SPF records in the DNS to
          validate if they match or not.</para>
        </listitem>

        <listitem>
          <para>Enable DKIM (DomainKey Identified Mail) to sign outgoing
          e-mails and provide the DKIM public key in the DNS records so
          DKIM-supporting mail servers can validate the signatures.</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>DNSSEC</title>

        <para/>
      </section>

      <section>
        <title>SPF</title>

        <para/>
      </section>

      <section>
        <title>DKIM</title>

        <para/>
      </section>
    </section>
  </section>

  <section>
    <title>BIND</title>

    <para>On the Internet, Berkeleys Internet Name Domain (BIND) server is the
    most popular DNS server to date. It has been plagued by its set of
    security issues, but is still very well supported on Gentoo (and other)
    platforms. The software was originally developed at Berkeley in the early
    80s in an open source model. Since 2010, the software is maintained by the
    Internet Systems Consortium.</para>

    <para>Because it has such a large history, it has also seen quite a few
    updates and even rewrites. The current major version (BIND 9) is a rewrite
    that was tailored to answer the various secrity-related concerns that came
    from earlier versions. Sadly, even BIND 9 has seen its set of security
    vulnerabilities. Although a new major is in the making (BIND 10) it is not
    made generally available for production use yet.</para>

    <section>
      <title>From records to views</title>

      <para>For DNS, the smallest set of information it returns is called a
      record. Records are grouped together in domains, and domains are grouped
      in zones. Within a record, there are 6 fields (including the name of the
      record and the type). In the next few sections, the syntax as used by
      BIND is described although the concepts are the same for other DNS
      servers.</para>

      <section>
        <title>Record structure</title>

        <para>When an IP address for a host name is declared, this actually
        maps on a DNS record:</para>

        <programlisting>www    IN  A      192.168.0.2</programlisting>

        <para>This record states that, within the domain that this record is a
        part of, that 'www.&lt;domain&gt;' resolves to 192.168.0.2. Type type
        of the record here is A. An IPv6 address would result in a AAAA
        record.</para>

        <programlisting>mail   IN  AAAA  2001:db8:10::1</programlisting>

        <para>For the same host, there can be multiple records as long as they
        are of a different type (and don't make the definitions
        ambiguous).</para>

        <programlisting>www    IN  A     192.168.0.2
       IN  AAAA  2001:db8:10::1</programlisting>

        <para>There are many record types available (and more are being
        defined every few years). For instance:</para>

        <itemizedlist>
          <listitem>
            <para>CNAME which says that the given host name is an alias for
            another record</para>
          </listitem>

          <listitem>
            <para>LOC provides location information for servers</para>
          </listitem>

          <listitem>
            <para>SSHFP gives the SSH finger print information for a
            server</para>
          </listitem>
        </itemizedlist>

        <para>etc...</para>
      </section>

      <section>
        <title>Domains</title>

        <para>Multiple records are combined within a domain.</para>

        <programlisting>; Comments are prepended with a semi-colon
$TTL 24h ; If records do not hold TTL information themselves, use this as default
$ORIGIN internal.genfic.com.  ; Domain that is defined here
@  1D  IN  SOA ns1.internal.genfic.com. hostmaster.genfic.com. (
         2013020401 ; serial
         3H ; refresh
         15 ; retry
         1w ; expire
         3h ; minimum
       )
       IN  NS     ns1.internal.genfic.com. ; in the domain</programlisting>

        <para>In the above example, the @ sign is shorthand for the domain
        ($ORIGIN).</para>

        <para>The first record in the domain declaration is the SOA record,
        and after this record there is an NS record.</para>
      </section>

      <section>
        <title>Zone</title>

        <para>One (or more) domains (and their affiliated records) are stored
        in a zone file. A zone is a specific space within the global Domain
        Name System that is managed (administered) by a single authority.
        Other DNS servers might also serve the same zone, but they will not be
        marked as the authoritative DNS service for that zone.</para>
      </section>

      <section>
        <title>View</title>

        <para>A view is not DNS specific, but a feature that many DNS servers
        offer. A view uses <emphasis>different zone files</emphasis> depending
        on the requestor. For instance, a DNS server might serve both
        Internet-originating requests as well as internal requests.
        Internet-originating requests thus need to receive the Internet-facing
        IP addresses as replies, but internal requests can use internal IP
        addresses.</para>

        <programlisting>public-host$ <command>dig +short @ns1.genfic.com www.genfic.com A</command>
123.45.67.89
intern-host$ <command>dig +short @ns1.genfic.com www.genfic.com A</command>
10.152.20.12</programlisting>
      </section>
    </section>

    <section>
      <title>Deployment and uses</title>

      <para>Configuring BIND on Gentoo Linux is fairly similar as configuring
      BIND on other platforms. There are plenty of good and elaborate
      resources on BIND configuration on the Internet, some of which are
      mentioned at the end of this chapter.</para>

      <section>
        <title>Installing bind</title>

        <para>First, install net-dns/bind. An overview of the USE flags used
        here is shown as well as output of the equery command.</para>

        <programlisting># <command>equery u bind</command>
[ Legend : U - final flag setting for installation]
[        : I - package is installed with flag     ]
[ Colors : set, unset                             ]
 * Found these USE flags for net-dns/bind-9.9.2_p1:
 U I
 - - berkdb      : Adds support for sys-libs/db (Berkeley DB for MySQL)
 + + caps        : Use Linux capabilities library to control privilege
 + + dlz         : Enables dynamic loaded zones, 3rd party extension
 - - doc         : Adds extra documentation (API, Javadoc, etc). It is recommended \
                   to enable per package instead of globally
 - - filter-aaaa : Enable filtering of AAAA records over IPv4
 - - geoip       : Add geoip support for country and city lookup based on IPs
 - - gost        : Enables gost OpenSSL engine support
 - - gssapi      : Enable gssapi support
 - - idn         : Enable support for Internationalized Domain Names
 + + ipv6        : Adds support for IP version 6
 - - ldap        : Adds LDAP support (Lightweight Directory Access Protocol)
 - - mysql       : Adds mySQL Database support
 - - odbc        : Adds ODBC Support (Open DataBase Connectivity)
 - - postgres    : Adds support for the postgresql database
 - - python      : Adds optional support/bindings for the Python language
 - - rpz         : Enable response policy rewriting (rpz)
 - - rrl         : Response Rate Limiting (RRL) - Experimental
 - - sdb-ldap    : Enables ldap-sdb backend
 + + ssl         : Adds support for Secure Socket Layer connections
 - - static-libs : Build static libraries
 + + threads     : Adds threads support for various packages. Usually pthreads
 + + urandom     : Use /dev/urandom instead of /dev/random
 + + xml         : Add support for XML files

# <command>emerge net-dns/bind net-dns/bind-tools</command>
# <command>rc-update add named default</command></programlisting>
      </section>

      <section>
        <title>Initial configuration</title>

        <para>The configuration below is meant for a master DNS server.</para>

        <para>Start with <filename>/etc/bind/named.conf</filename><indexterm>
            <primary>named.conf</primary>
          </indexterm>:</para>

        <programlisting>options {
  directory "/var/bind";
  pid-file "/var/run/named/named.pid";
  statistics-file "/var/run/named/named.stats";
  listen-on { 127.0.0.1; };
  listen-on-v6 { 2001:db8:81:21::ac:98ad:5fe1; };
  allow-query { any; };
  zone-statistics yes;
  allow-transfer { 2001:db8:81:22::ae:6b01:e3d8; };
  notify yes;
  recursion no;
  version "[nope]";
};

# Access to DNS for local addresses (i.e. genfic-owned)
view "local" {
  match-clients { 2001:db8:81::/48; };
  recursion yes;
  zone "genfic.com" { 
    type master;
    file "pri/com.genfic";
  };
  zone "1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa" {
    type master;
    file "pri/1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa";
  };
};</programlisting>

        <para>That's it. The configuration will have this installation work as
        the master DNS server and will (only) accept DNS requests from IPv6
        addresses within the defined IP range. For these requests, the
        <filename>pri/com.genfic</filename> file is used (which is the "zone"
        file that will contain the DNS records) and
        <filename>pri/1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa</filename> for the
        reverse lookups.</para>

        <para>The name of the reverse lookup is fairly difficult to work with
        by people. For this reason, create a symbolic link that makes this a
        lot easier:</para>

        <programlisting># <command>ln -s 1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa genfic.com.inv</command></programlisting>

        <para>This way, &lt;domain&gt;.inv is a symbolic link pointing to the
        reverse lookup zone definition.</para>

        <para>For the slave server, the setup is fairly similar:</para>

        <itemizedlist>
          <listitem>
            <para>do not set the <parameter>allow-transfer</parameter> though.
            It is a slave server.</para>
          </listitem>

          <listitem>
            <para>set the type of the zone's to "<parameter>slave</parameter>"
            instead and add in <userinput>masters {
            2001:db8:81:21::ac:98ad:5fe1; }</userinput> to each zone. That
            will tell BIND what the master of this particular zone is.</para>
          </listitem>

          <listitem>
            <para>on the slave, set the
            <parameter>named_write_master_zones</parameter> SELinux boolean to
            "on" so that the <code>named_t</code> domain can write to the
            cache location.</para>
          </listitem>
        </itemizedlist>

        <para>Finally, set the initial zone files for the organization.</para>

        <programlisting># <command>cat /var/bind/pri/com.genfic</command>
$TTL 1h ;
$ORIGIN genfic.com.
@       IN      SOA     ns.genfic.com. ns.genfic.com. (
                        2012041101
                        1d      
                        2h
                        4w
                        1h )

        IN      NS      ns.genfic.com.
        IN      NS      ns2.genfic.com.
        IN      MX      10      mail.genfic.com.
        IN      MX      20      mail2.genfic.com.

genfic.com.     IN      AAAA    2001:db8:81:80::dd:13ed:c49e;
ns              IN      AAAA    2001:db8:81:21::ac:98ad:5fe1;
ns2             IN      AAAA    2001:db8:81:22::ae:6b01:e3d8;
www             IN      CNAME   genfic.com.;
mail            IN      AAAA    2001:db8:81:21::b0:0738:8ad5;
mail2           IN      AAAA    2001:db8:81:22::50:5e9f:e569;
; (...)</programlisting>

        <programlisting># <command>cat /var/bind/pri/com.genfic.inv</command>
$TTL 1h ;
@       IN      SOA     1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa ns.genfic.com. (
                        2012041101
                        1d
                        2h
                        4w
                        1h )

        IN      NS      ns.genfic.com.
        IN      NS      ns2.genfic.com.

$ORIGIN 1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.

1.e.f.5.d.a.8.9.c.a.0.0.0.0.0.0.1.2.0.0         IN      PTR     ns.genfic.com.
8.d.3.e.1.0.b.6.e.a.0.0.0.0.0.0.2.2.0.0         IN      PTR     ns2.genfic.com.
; (...)</programlisting>

        <para>With the configuration done, start the named daemon.</para>

        <programlisting># <command>run_init rc-service named start</command></programlisting>
      </section>

      <section>
        <title>Hardening zone transfers</title>

        <para>The BIND system can get additional hardening by introducing
        transaction signatures (TSIG<indexterm>
            <primary>TSIG</primary>
          </indexterm>). To do so, create a shared secret (key) with
        <command>dnssec-keygen</command>. The generated key is then added to
        the <filename>named.conf</filename> file like so:</para>

        <programlisting># <command>dnssec-keygen -a HMAC-MD5 -b 128 -n HOST secundary</command>
# <command>cat Ksecundary.*.key</command>
secundary. IN KEY 512 3 157 d8fhe2frgY24WFedx348==</programlisting>

        <programlisting>(... In named.conf ...)
key secundary { algorithm hmac-md5; secret "d8fhe2frgY24WFedx348=="; };

(... In named.conf's zone definition ...)
allow-update { key secundary; };</programlisting>

        <para>In the slave's configuration, add in an entry for the master and
        refer to this key as well.</para>

        <programlisting>(... In named.conf ...)
key secundary { algorithm hmac-md5; secret "d8fhe2frgY24WFedx348=="; };
server 2001:db8:81:21::ac:98ad:5fe1 { keys { secundary; }; };</programlisting>

        <para>It is not possible to use the TSIG together with an IP address
        list though, so either use the keys or use IP addresses (or use the
        keys and define local firewall rules).</para>
      </section>

      <section>
        <title>Hardening DNS records (DNSSEC)</title>

        <para>To use DNSSEC, first create two keypairs. One is the KSK (Key
        Signing Key) and is a long-term keypair. It will be used to sign the
        ZSKs (Zone Signing Keys) used for the zones. ZSKs are used to sign
        most DNS records, whereas the KSK is used to sign the ZSK. It is also
        the KSK which is signed by the "higher-level" domain.</para>

        <programlisting># <command>cd /var/named/chroot/etc/bind</command>
# <command>mkdir keys &amp;&amp; cd keys</command>
# <command>dnssec-keygen -a RSASHA256 -b 2048 -3 genfic.com</command>
# <command>dnssec-keygen -a RSASHA256 -b 2048 -3 -fk genfic.com</command>
# <command>chown -R named:named .</command></programlisting>

        <para>Next, update the BIND configuration to use these keys. Below is
        an updated <filename>named.conf</filename> file with highlights where
        changes were made:</para>

        <programlisting>options {
  directory "/var/bind";
  pid-file "/var/run/named/named.pid";
  statistics-file "/var/run/named/named.stats";
  listen-on { 127.0.0.1; };
  listen-on-v6 { 2001:db8:81:21::ac:98ad:5fe1; };
  allow-query { any; };
  zone-statistics yes;
  allow-transfer { 2001:db8:81:22::ae:6b01:e3d8; };
  notify yes;
  recursion no;
  version "[nope]";
<command>  dnssec-validation yes;
  dnssec-lookaside auto;
  dnssec-enable yes;
  key-directory "/etc/bind/keys";
  allow-new-zones yes;</command>
};
view "local" {
  match-clients { 2001:db8:81::/48; };
  recursion yes;
  zone "genfic.com" {
        type master;
        file "pri/genfic.com";
<command>        inline-signing yes;
        auto-dnssec maintain;</command>
  };
  zone "1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/genfic.com.inv";
<command>        inline-signing yes;
        auto-dnssec maintain;</command>
  };
};

<command>include "/etc/bind/bind.keys";</command></programlisting>

        <para>Make sure that the named daemon has write access to the zone
        files (both through the SELinux
        <parameter>named_write_masters_zone</parameter> boolean as well as
        regular Linux permissions) as it will save the signed records next to
        the regular file.</para>

        <para>With these changes made, restarting the named daemon enables
        DNSSEC support.</para>
      </section>
    </section>

    <section>
      <title>Using bind</title>

      <para>The bind server is started and managed through its init
      script.</para>

      <programlisting># <command>run_init rc-service named start</command></programlisting>

      <section>
        <title>Validating configurations</title>

        <para>The installed utilities can help troubleshoot configuration
        issues.</para>

        <para>The <command>named-checkconf</command> tool will verify the
        syntax of the <filename>named.conf</filename> file and report any
        issues it finds.</para>

        <para>With <command>named-checkzone</command>, the syntax of the zone
        files can be validated.</para>
      </section>

      <section>
        <title>Checking named results</title>

        <para>A good tool to query name servers (to make sure they function
        correctly) is dig.</para>

        <para>To see if the name server is up and running:</para>

        <programlisting># <command>ping6 -n -c 1 ns.genfic.com</command></programlisting>

        <para>If the host resolves (locally) and replies, then at least the
        local network is working. Now query the name server itself, asking for
        the IP address of mail.genfic.com:</para>

        <programlisting># <command>dig @ns.genfic.com mail.genfic.com AAAA</command></programlisting>

        <para>To get a reverse lookup, use -n -x:</para>

        <programlisting># <command>dig -x 2001:db8:81:22::ae:6b01:e3d8 @ns.genfic.com </command></programlisting>

        <para>If the output of dig is not needed, but just the answer, add in
        "+short".</para>

        <programlisting># <command>dig mail.genfic.com AAAA @ns.genfic.com +short</command>
2001:db8:81:21:0:b0:738:8ad5</programlisting>
      </section>

      <section>
        <title>Sending DNSSEC DS Records to the parent domain</title>

        <para>When the DNS service provides DNSSEC, the Delegation Signer
        information should be uploaded to the parent domain service. This DS
        record will then be stored in the parent zone, and thus get its own
        digital signature so clients can check the validity of the key. To
        push the DS records, generate those using
        <command>dnssec-dsfromkey</command> against the KSK:</para>

        <programlisting># <command>grep key-signing *.key</command>
K1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.+008+41569.key:; This is a key-signing key, \
  keyid 41569, for 1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.
Kgenfic.com.+008+51397.key:; This is a key-signing key, keyid 51397, for \
  genfic.com
# <command>dnssec-dsfromkey Kgenfic.com.+008+51397.key</command>
genfic.com. IN DS 51397 8 1 B23D4D54B971A2A835A31B2B1AF24AB43E2C8EA2
genfic.com. IN DS 51397 8 2 323F009E2B952F3247DC78BA85AA38A9C798B5FE129A78935CCC4686 \
  C5F02A14</programlisting>

        <para>These records (the first is a SHA1 checksum of the DNSKEY and
        owner information, the second one a SHA256 checksum of the same data)
        can now be submitted to the registrar. Some support an automated way
        to handle this, others still require to send it manually. Just make
        sure it is sent securely - not that the information is private, but if
        the registrar doesn't take proper measures to make sure it is an
        authoritative figure handing over the DS records, then the entire idea
        of a secure DNS falls down.</para>
      </section>

      <section>
        <title>Refreshing DNSSEC Zone Signing Keys</title>

        <para>While creating the keys, <command>dnssec-keygen</command>
        supports timing information to allow for proper roll-over of the zone
        signing keys. This information includes a publication date (when will
        the new key be published in the DNS records, even if the key is not
        used yet), activation date (when will the new key be used to sign
        records), inactivation date and deletion date. When refreshing the
        zone keys, the DS records do not need to be resubmitted (as those are
        made against the key-signing key, not zone-signing key).</para>

        <para>When made available, run <command>rndc loadkeys
        genfic.com</command> to reload the keys for the genfic.com
        domain.</para>

        <para>What if the key signing keys are refreshed? In that case, send
        over the new DS records to the parent domain. It is better to do
        double-signing when refreshing KSK versus using roll-over periods for
        ZSK, as the KSK only signs one record (the DNSKEY one) whereas the ZSK
        signs many more records. Double-signing would increase the amount of
        records immensely in case of the ZSK.</para>
      </section>

      <section>
        <title>Pushing changes</title>

        <para>Changes to BIND can be pushed using the
        <command>nsupdate</command><indexterm>
            <primary>nsupdate</primary>
          </indexterm> application. Make sure the system from which it is run
        has the proper rights in BIND (through the
        <parameter>allow-update</parameter> directive). Once set up though, it
        can be used to create the feed from, for instance, a configuration
        management database.</para>

        <programlisting>$ <command>cat changes.txt</command>
server 2001:db8:81:21::ac:98ad:5fe1 53
update add mail2.internal.genfic.com 3600 AAAA 2001:db8:81:22::50:5e9f:e569
$ <command>nsupdate ./changes.txt</command></programlisting>
      </section>
    </section>

    <section>
      <title>Logging</title>

      <para>In case of DNS services, the following events should probably be
      logged:</para>

      <itemizedlist>
        <listitem>
          <para>queries made against the DNS server (timestamp, source
          address, query itself) and the answers given</para>
        </listitem>

        <listitem>
          <para>modifications made on the configuration (timestamp, source
          address, modification)</para>
        </listitem>
      </itemizedlist>

      <para>Whereas the logging of the queries can be done in local log files,
      modifications need to be sent to a remote location (and might be stored
      locally too) for audit purposes.</para>

      <section>
        <title>Configuring logging</title>

        <para>BIND by default will log through the system logger. This allows
        to store the logging information where needed, perhaps even moving the
        data towards other systems.</para>

        <para>However, BIND does not log queries immediately - it needs to be
        told to do so through the <command>querylog</command> command:</para>

        <programlisting># <command>rndc querylog</command></programlisting>

        <para>Once enabled, queries will appear in the system log like
        so:</para>

        <programlisting>Dec 17 09:15:30 ns named[3721]: client 2001:db8:81:21:0:ac:98ad:5fe1#48818 \
  (mail.genfic.com): view local: query: mail.genfic.com IN AAAA +ED \
  (2001:db8:81:21:0:ac:98ad:5fe1)
Dec 17 09:16:07 ns named[3721]: client 2001:db8:81:21:0:ac:98ad:5fe1#54273 \
  (ns2.genfic.com): view local: query: ns2.genfic.com IN AAAA +ED \
  (2001:db8:81:21:0:ac:98ad:5fe1)</programlisting>

        <para>In the above case, the queries came from the same client (one
        with IPv6 address ending in :5fe1) and the client wanted to know the
        IPv6 addresses of mail.genfic.com and ns2.genfic.com.</para>
      </section>
    </section>
  </section>

  <section>
    <title>DHCP</title>

    <para>When you have systems that require dynamically allocated IP
    addresses, you will need a DHCP service.</para>

    <para>DHCP<indexterm>
        <primary>DHCP</primary>
      </indexterm> stands for Dynamic Host Configuration Protocol and is the
    de-facto standard for dynamic IP allocation. In our architecture, we will
    be using DHCP for the workstations, VPN and other devices that are in the
    "bring your own device" pool, because all those devices might be started
    on different locations and as such are difficult to manage with fixed IP
    addresses.</para>

    <section>
      <title>DHCP Architecture</title>

      <para>Within our architecture, we will be positioning two DHCP servers
      internally, in an active/standby setup. Because ISC's DHCP (which we
      will use here) does not support high-available mode for IPv6 yet, we are
      forced to use a "standard" setup. When ISC supports failover mode for
      IPv6 as well, I will update the architecture accordingly.</para>

      <para>We also implement DHCP relay daemons within the target subnets
      where the workstations and other devices will need one.</para>

      <section>
        <title>General architecture</title>

        <para>The next figure displays the general architecture being put in
        place for our needs.</para>

        <figure>
          <title>General DHCP architecture</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/03-dhcp.png" scalefit="0"
                         width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The given architecture is fairly simple:</para>

        <itemizedlist>
          <listitem>
            <para>The workstation requests a dynamic IP address
            (<emphasis>Request IP</emphasis>) which gets captured by the relay
            server.</para>
          </listitem>

          <listitem>
            <para>The relay server forwards the request (<emphasis>Forward
            request</emphasis>) to the DHCP servers. They eventually complete
            the DHCP handshake through the relay server</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Installation and configuration</title>

      <para>The installation and configuration of DHCP is fairly simple and,
      similar to BIND, uses flat files for its configuration.</para>

      <section>
        <title>Installation</title>

        <para>First install the DHCP server. We will use ISC's DHCP server
        here.</para>

        <programlisting># <command>emerge dhcp</command></programlisting>

        <para>Do the same on the relay servers. We will, however, not start
        the main server there but the relay service only.</para>

        <para>Next, edit <filename>/etc/conf.d/dhcpd</filename> to configure
        the DHCP daemon to use IPv6.</para>

        <programlisting># <command>cat /etc/conf.d/dhcpd</command>
DHCPD_OPTS="-6"</programlisting>
      </section>

      <section>
        <title>Master DHCP server</title>

        <para>On the master DHCP server, configure the
        <filename>/etc/dhcp/dhcpd.conf</filename> file similar to the
        following:</para>

        <programlisting># <command>cat /etc/dhcp/dhcpd.conf</command>
ddns-update-style interim;

authorative;

default-lease-time 600;
max-lease-time 7200;

subnet6 2001:db8:81:e2::/64 {
  range6 2001:db8:81:e2::f00 2001:db8:81:e2::fff;
  option dhcp6.name-servers 2001:db8:81:21::ac:98ad:5fe1, \
    2001:db8:81:22::ae:6b01:e3d8;
  option dhcp6.domain-search "workstation.internal.genfic.com";
}

subnet6 2001:db8:81:21::/64 {
  # Empty but must be declared so DHCPd starts
}</programlisting>

        <para>You can also have the DHCP server give a fixed IP address to a
        system based on its MAC address. This is handled through the host
        parameter:</para>

        <programlisting>group {
  use-host-decl-names on;

  host la00010 {
    hardware ethernet "e8:0c:11:31:9f:0b";
    fixed-address la00010.workstation.internal.genfic.com;
    option host-name "la00010";
  }
}</programlisting>

        <para>Finally, start the service and register it to automatically
        start during boot.</para>

        <programlisting># <command>rc-update add dhcpd default</command>
# <command>rc-service dhcpd start</command></programlisting>

        <para>Our secundary system will have a similar setup, but will use a
        separate range (say :1000 to :10ff).</para>
      </section>

      <section>
        <title>Relay services</title>

        <para>When you configure a relay service, edit
        <filename>/etc/conf.d/dhcrelay</filename> and set the DHCRELAY_OPTS
        accordingly.</para>

        <programlisting># <command>cat /etc/conf.d/dhcrelay</command>
DHCRELAY_OPTS="-6 -l eth0 -u 2001:db8:81:21::f4:3303:40f4%eth0 -u \
  2001:db8:81:22::5f:3853:fe78%eth0"</programlisting>

        <para>You also need to edit <filename>/etc/init.d/dhcrelay</filename>
        currently as it forces two options that are only valid for
        IPv4:</para>

        <programlisting># <command>vim /etc/init.d/dhcrelay</command>
(... 1. look for $(printf " -i %s" ${IFACE}) and delete it ...)
(... 2. look for DHCRELAY_SERVERS and remove it ...)
(... End result should be something like:)
start-stop-daemon --start --exec /usr/sbin/dhcrelay \
  -- -q ${DHCRELAY_OPTS}</programlisting>

        <para>Then start up the relay service and make sure it starts at boot
        time as well.</para>

        <programlisting># <command>rc-update add dhcrelay default</command>
# <command>rc-service dhcrelay start</command></programlisting>
      </section>
    </section>

    <section>
      <title>Logging</title>

      <para>For the DHCP service, we want to have logs about the DHCP queries
      made as well as their reply. These logs can be stored locally.</para>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>Resources</title>

    <para>IP addresses, segmentation and IPv6:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.sans.org/reading_room/whitepapers/hsoffice/design-secure-network-segmentation-approach_1645">Design
        Secure Network Segmentation Approach</link>, article on SANS</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://ipv6.com/articles/general/IPv6-Addressing.htm">IPv6
        Addressing</link> (IPv6.com)</para>
      </listitem>
    </itemizedlist>

    <para>On ISC BIND:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://en.gentoo-wiki.com/wiki/BIND">BIND</link>
        (Gentoo-wiki.com)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.zytrax.com/books/dns/ch7/xfer.html">DNS BIND
        Zone Transfers and Updates</link> (Zytrax.com); this is part of a
        bigger and interesting reference on BIND9 on Linux/Unix
        systems.</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.cyberciti.biz/faq/unix-linux-bind-named-configuring-tsig/">Transaction
        Signatures Configuration</link> (Cyberciti.biz)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://benchmarks.cisecurity.org/en-us/?route=downloads.show.single.bind.200">CISecurity
        BIND Benchmark</link> (CISecurity.org)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://backreference.org/2010/11/17/dnssec-verification-with-dig/">DNSSEC
        validation with dig</link> (backreference.org)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="https://www.nlnetlabs.nl/publications/dnssec_howto/">DNSSEC
        HOWTO</link> (nlnetlabs.nl)</para>
      </listitem>
    </itemizedlist>

    <para>On ISC DHCP:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.madboa.com/geek/dhcp-failover/">High-available
        DHCP with failover</link> (IPv4 only) (Madboa.com)</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
