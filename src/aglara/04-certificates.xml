<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="certificates"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Certificates and PKI</title>

  <section>
    <title>Why we need it</title>

    <para>Now that some of the basic network services have been installed, it
    is time to look at certificate management.</para>

    <para>Certificates are used to either authentication people or clients to
    a service, or to support encryption of data sent across the network. For
    small networks, administrators usually create self-signed
    certificates<indexterm>
        <primary>certificate</primary>
      </indexterm>, but the problem with self-signed certificates is that
    every client that wants to communicate with a service using a self-signed
    certificate needs to include this certificate in its trust store.</para>

    <para>What is that you say? Let's give a quick explanation on certificates
    then.</para>

    <section>
      <title>How do certificates work</title>

      <para>Assume there are two parties (Alice and Bob are the two names
      often used in encryption fields) willing to communicate with each other
      over a secured, encrypted channel. They generally need to use an
      encryption key which only those two parties know. Once they have such an
      encryption key, they can use it to communicate with each other
      securely:</para>

      <itemizedlist>
        <listitem>
          <para>because they are the only two with the key, others cannot
          decrypt the information being sent between the two</para>
        </listitem>

        <listitem>
          <para>because no-one else has the key, each of those parties is
          certain that information received from the other one is indeed from
          the other party (as it would otherwise not be properly
          encrypted)</para>
        </listitem>
      </itemizedlist>

      <para>The major difficulty comes from getting a "shared" encryption key
      without having to send it over the (clear) network so that a malicious
      person (Carol or Charles, I'll use the gender-neutral "Chris" ;-) cannot
      obtain it.</para>

      <section>
        <title>Symmetric keys</title>

        <para>Most secure communication uses a symmetric key, often called a
        session key.</para>

        <para>A symmetric key is an encryption key which is used for
        encryption and decryption. In our example of a secure communication,
        the symmetric key is the secret encryption key that the two parties
        (and only those two parties) should have a hold off. Such a symmetric
        key is usually used with an algorithm that is fairly simple (and thus
        has good performance) in regard of encryption and decryption.</para>

        <para>This good performance requirement is needed because it will be
        used to encrypt and decrypt all traffic sent between the two services,
        which can be a fair amount of data. If the encryption and decryption
        algorithms used would be very CPU intensive, the communication would
        be far too slow (or use too many resources on the systems).</para>

        <para>A way to get both parties to know a common, secret key is to
        each use a secret algorithm (or known algorithm with secret data)
        which has the property that, whatever order you use to apply the
        algorithms, the result is always the same. Extremely simple examples
        are addition or multiplication, but far more complex ones exist as
        well. A non-mathematical example would be to add in colored paint to a
        pre-agreed color: if you first add in blue and then red, or first red
        and then blue, the result is always the same.</para>

        <para>Well, in our case (let's use addition), both Alice and Bob have
        such a secret and will exchange the results of their
        algorithms:</para>

        <programlisting>   Alice                 Bob
  "1000"                "1000"
  +7428                 +5879
 = 8428                = 6879
 -------&lt;--exchange-&gt;--------
   6879                  8428
  +7428                 +5879
= 14307               = 14307  &lt;-- the symmetric key</programlisting>

        <para>The number to begin with may be made public (although it is
        safer when its not) because, even with Chris knowing the numbers
        "1000, 8428, 6879", if that person does not know the algorithm (or
        data) used, it will be difficult for him to find out what the common
        secret key will be. Of course, in our example, addition is quite
        simple, but at least it gives the idea on what such key exchange can
        be like.</para>
      </section>

      <section>
        <title>Public and private keys</title>

        <para>What are public/private keys then? Well, the idea behind
        public-key cryptography<indexterm>
            <primary>public-key cryptography</primary>
          </indexterm> is that, unlike a symmetric key, there are now two keys
        in play:</para>

        <itemizedlist>
          <listitem>
            <para>the private key is only known by the target service (say
            Alice)</para>
          </listitem>

          <listitem>
            <para>the public key is known by everyone who wants to communicate
            with the target</para>
          </listitem>
        </itemizedlist>

        <para>The two keys play such that encryption of data happens with the
        public key, but you cannot decrypt that data with the public key. To
        decrypt it, you need the private key. But another aspect is that you
        can encrypt with the private key and decrypt with the public, allowing
        people to verify that data was indeed encrypted by that person (in
        reality this is used to "sign" data, which is to make a checksum of
        the file and then encrypt this checksum).</para>

        <para>In our communication problem from before, this would make it a
        whole lot easier: Bob just takes Alice' public key, encrypts the data
        he wants to send to Alice using the public key, and he's done. Alice
        can do the same with Bob's public key so that two-way communication is
        possible. However, there are a few drawbacks here:</para>

        <itemizedlist>
          <listitem>
            <para>Public-key cryptographic functions are quite resource
            intensive.</para>

            <para>For this reason, they are only used to exchange a symmetric
            key or part of a symmetric key (like the initial number "1000"
            used in our previous example).</para>
          </listitem>

          <listitem>
            <para>A malicious person could create his own public/private key
            pair and tell the world that his public key is the public key of
            Alice. If Bob would want to communicate with Alice but uses Chris'
            public key, he would encrypt the data so that Chris can only read
            it. Chris then decrypts the data, encrypts it with Alice' real
            public key and sends it to Alice. A communication channel between
            Alice and Bob come forth, but Chris is "in the middle" reading
            (and perhaps even manipulating) the data. This is called a
            <emphasis>Man-In-The-Middle</emphasis><indexterm>
                <primary>man-in-the-middle</primary>
              </indexterm> or MITM<indexterm>
                <primary>MITM attack</primary>
              </indexterm> attack.</para>
          </listitem>
        </itemizedlist>

        <para>The second part is the major "downside" of a public key - how
        are you certain that this public key is actually of the target person
        or service you want to communicate with? This is where certificates
        come into play...</para>
      </section>

      <section>
        <title>Certificates</title>

        <para>A certificate is this same public key, together with data that
        identifies who the public/private key belongs to. This certificate
        also has signatures attached that are generated by other certificates.
        The idea is that, if both Alice and Bob know a public key
        (certificate) of a party they <emphasis>both</emphasis> trust (and
        know that this public key is indeed of the trusted party), then Alice
        can send her own certificate, signed by this trusted party, to
        Bob.</para>

        <figure>
          <title>Certificates and CAs in a nutshell</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/04-ca_certificate.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Bob then validates the signature on this certificate (using the
        public key he has of the trusted party). If the signature indeed pans
        out, then Bob knows that the certificate he got is indeed from Alice
        (because the trusted party sais so).</para>

        <para>A malicious person now has a more difficult task. If a wrong
        certificate is generated, then the trusted party will probably not
        sign it. As a result, Chris cannot "fake" a certificate because both
        Alice and Bob will check the signature of the certificate before they
        agree that it is a valid certificate.</para>
      </section>
    </section>

    <section>
      <title>Certificates in organizations</title>

      <para>In a larger organization or network, certificates play an
      important role. Many servers use SSL (or TLS) encryption. In this case,
      the client connects to the server and receives that servers' certificate
      information. The client validates this certificate with the keys he has
      of trusted "authorative" actors. If the certificate is valid, then the
      client knows he is communicating with the correct service. Some magic
      occurs then to generate a session key only the client and the server
      know (if you're interested, search on the internet for "ssl handshake
      pre-master") so they can then use symmetric encryption algorithms for
      the rest of the communication.</para>

      <para>If we were to use self-signed certificates, then all the clients
      should have the public keys of all these systems in their own list of
      trusted keys (this combination is called the <emphasis>trust
      store</emphasis>), which is a nightmare to manage. And if you had to do
      that, why not just keep the symmetric keys then and do not use public
      key infrastructure... Or you could have your clients accept self-signed
      certificates, but then you are vulnerable for MITM attacks.</para>

      <para>This is where good certificate management comes into play. Serious
      organizations need a way to "sign" certificates used in the architecture
      with a single key (or very limited set of keys) and distribute this
      (trusted) public key to all the clients. The trust store of these
      clients is then much smaller.</para>

      <para>The service that signs certificates is called the
      <emphasis>Certificate Authority</emphasis><indexterm>
          <primary>certificate authority</primary>
        </indexterm> or CA<indexterm>
          <primary>CA</primary>
        </indexterm>. Often, a chain of keys is used: a top key called the
      <emphasis>Root CA</emphasis> which is extremely heavily protected and is
      used to sign a small set of subkeys or signing keys. These signing keys
      are then used to sign the certificates. Often, these signing keys have a
      different purpose (keys for signing certificates that will be used for
      code signing, keys for signing certificates that will be used for
      authenticating people or clients, keys for signing certificates that
      will be used for internet-facing services, etc.)</para>

      <section>
        <title>Problems with Certificate Authorities</title>

        <para>On the Internet, many popular CA services exist, like
        CACert.org, Verizon, Geotrust, and more. All these companies try to
        become this "trusted party" that others seek and offer signing
        services: they will sign certificates you create (some of them even
        generate public/private key pairs if you want). These services try to
        protect their own keys and only sign certificates from customers they
        can validate are proper customers (with correct identities).</para>

        <para>Although this seems like a valid model, it does have its
        flaws:</para>

        <itemizedlist>
          <listitem>
            <para>Such popular services are more likely target for hackers and
            crackers. Once their keys are compromised, you should actively
            revoke their public keys from your trust stores. However, that
            also means that all certificates you use for your services that
            are signed by these companies will effectively stop working as
            your clients will not trust the certificates anymore.</para>
          </listitem>

          <listitem>
            <para>These services have a financial incentive to sign
            certificates. If they do not do proper validation of the
            certificate requests they get, they might sign a certificate from
            a malicious person (who is pretending to be a valid
            customer).</para>
          </listitem>

          <listitem>
            <para>The more of these keys that are in your clients' trust
            store, the more chance that a malicious certificate is seen by
            your client as valid.</para>
          </listitem>
        </itemizedlist>

        <para>The latter is important to remember. Assume that your clients'
        truststore has 100 certificates that it "trusts", even though your
        organization only uses a single one. If a malicious user creates a
        certificate that identifies itself as one of your services and gets it
        signed by one of those 100 CAs, then your client will trust the
        connection if it uses this (malicious) certificate (because it is
        signed with one of the trusted keys).</para>
      </section>

      <section>
        <title>Keeping a lid on CAs</title>

        <para>To keep the risk sufficiently low that a malicious certificate
        is being used, you need to find a CA that you trust fully, and keep
        your trust store limited to that CA.</para>

        <para>And who else to trust better than yourself ;-)</para>

        <figure>
          <title>Use of a CA management service</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/04-ejbca.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>By using management software for certificates internally, many
        important activities can be handled without having to seek for and pay
        a large CA vendor:</para>

        <itemizedlist>
          <listitem>
            <para>You can create your own CA store</para>
          </listitem>

          <listitem>
            <para>You can sign requests of certificate requests that users
            have sent to you</para>
          </listitem>

          <listitem>
            <para>You can revoke certificates (or at least, signatures you
            made on certificates) for end user certificates that you should
            not allow to trust anymore (for instance because they have been
            compromised)</para>
          </listitem>

          <listitem>
            <para>You can have users create a certificate (in case they don't
            have the proper tools on their systems, although I seriously don't
            recommend to generate private and public keys on a remote
            server)</para>
          </listitem>

          <listitem>
            <para>You can have users submit a certificate signing request to
            you for processing, and then download the signed certificate from
            the site</para>
          </listitem>
        </itemizedlist>

        <para>The use of a webbased software allows you to fully isolate the
        service so that the number of attack vectors against the system is
        very limited.</para>
      </section>
    </section>
  </section>

  <section>
    <title>CA Service Software</title>

    <para>As CA management software, we will use EJBCA. EJBCA is a free
    software PKI<indexterm>
        <primary>PKI</primary>
      </indexterm> (<emphasis>public key infrastructure</emphasis><indexterm>
        <primary>public key infrastructure</primary>
      </indexterm>) management solution built upon Java Enterprise Edition
    (abbreviated JEE). It runs on the free software JBoss application server,
    which we will configure first.</para>

    <section>
      <title>JBoss</title>

      <para>JBoss<indexterm>
          <primary>JBoss</primary>
        </indexterm> is a family of free software products developed mainly by
      RedHat and which focuses on the middleware components many organizations
      need. Right now, what we need is the JBoss Application Server,
      abbreviated as JBoss AS. The JBoss Application Server implements the
      Java Enterprise Edition (Java EE or JEE) stack.</para>

      <section>
        <title>Architecture</title>

        <para>To help in the administration and management of JBoss, a few
        interesting points on its architecture.</para>

        <para>JBoss AS supports two management modes, one is
        <emphasis>standalone mode</emphasis> and the other is <emphasis>domain
        mode</emphasis>.</para>

        <itemizedlist>
          <listitem>
            <para>In standalone mode, the JBoss AS application installation on
            the server is managed through the same JBoss AS
            installation.</para>
          </listitem>

          <listitem>
            <para>In domain mode, you have a set of JBoss AS application
            installations which are managed as a single set.</para>
          </listitem>
        </itemizedlist>

        <para>For now, we will use JBoss AS in standalone mode.</para>

        <para>We will use /var/lib/jboss as JBoss' base directory (in which
        the instance can write and have its applications installed in).</para>
      </section>

      <section>
        <title>Enabling SELinux</title>

        <para>Currently, no SELinux policy for JBoss AS exists yet. I have
        made a simple one, which is available in my overlay (called
        3p-selinux-jbossas, "3rd party SELinux jbossas module" for those
        wondering ;-) and which I'll use in this architecture.</para>

        <programlisting># <command>emerge 3p-selinux-jbossas</command></programlisting>

        <para>With this module installed, we can now install JBoss Application
        Server (immediately with the correct file contexts).</para>
      </section>

      <section>
        <title>Installing JBoss</title>

        <para>In Gentoo, JBoss is not available in the default tree. Luckily,
        it is well supported upstream through simple packaging.</para>

        <para>First, we install <package>virtual/jdk</package>, a meta-package
        in Gentoo which will pull in a Java Development Kit suite (probably
        icedtea):</para>

        <programlisting># <command>emerge virtual/jdk</command></programlisting>

        <para>We need to install a jdk rather than a jre (Java Runtime
        Environment) as the JBoss Application Server can require a working
        java compiler (for instance to compile JSP pages into executable
        code). You probably want to check your USE flags as well here - there
        is a significant difference in number of installed packages when you
        tweak your USE flags. I ran this with <parameter>USE="-alsa -cups
        -X"</parameter> to start with.</para>

        <para>Next create the jboss user and group:</para>

        <programlisting># <command>groupadd jboss</command>
# <command>useradd -m -g jboss jboss</command>
# <command>passwd -l jboss</command></programlisting>

        <para>Next we download the binary distribution for RedHat JBoss AS. In
        this guide, I'll use JBoss AS 7.1.</para>

        <programlisting># <command>cd /opt</command>
# <command>mkdir redhat</command>
# <command>cd redhat</command>
# <command>wget http://download.jboss.org/jbossas/7.1/jboss-as-7.1.0.CR1b/jboss-as-7.1.0.CR1b.tar.gz</command>
# <command>tar xzf jboss-as-7.1.0.CR1b.tar.gz</command>
# <command>chown -R root:root /opt/redhat</command>
# <command>restorecon -R /opt/redhat</command>
# </programlisting>

        <para>Create the following init script and configuration files to
        manage the startup of the application server:</para>

        <programlisting># <command>cat /etc/init.d/jboss-as</command>
#!/sbin/runscript
# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header$

PIDFILE=/var/run/jboss-as.pid
LOGFILE=/var/log/jboss-as.log

depend() {
        need net
        use logger
}

start() {
        ebegin "Starting JBoss AS"
                start-stop-daemon --start --quiet --background \
                --make-pidfile --pidfile ${PIDFILE} \
                --stdout ${LOGFILE} --stderr ${LOGFILE} \
                --exec /opt/redhat/jboss-as-7.1.0.CR1b/bin/standalone.sh \
                --user=${JBOSS_AS_USER} --group=${JBOSS_AS_GROUP} \
                -- ${JBOSS_AS_OPTS}
        eend $?
}

stop() {
        ebegin "Stopping JBoss AS"
                start-stop-daemon --stop --quiet \
                --pidfile ${PIDFILE}
        eend $?
}</programlisting>

        <programlisting># <command>cat /etc/conf.d/jboss-as</command>
JBOSS_AS_USER="jboss"
JBOSS_AS_GROUP="jboss"
JBOSS_AS_OPTS="-Djboss.server.base.dir=/var/lib/jboss"</programlisting>

        <para>Next, create <filename>/var/lib/jboss</filename> and copy the
        contents of the JBoss AS standalone directory to it.</para>

        <programlisting># <command>mkdir /var/lib/jboss</command>
# <command>rsync /opt/redhat/jboss-as-7.1.0.CR1b/standalone/ /var/lib/jboss</command>
# <command>mkdir /var/lib/jboss/data</command>
# <command>chown -R jboss:jboss /var/lib/jboss/data</command>
# <command>restorecon -R /var/lib/jboss</command>
# </programlisting>
      </section>
    </section>

    <section>
      <title>PostgreSQL</title>

      <para>The EJBCA software we will install later requires a database to
      store its information in. We will use a PostgreSQL database for
      this.</para>

      <section>
        <title>PostgreSQL Architecture</title>

        <para>In PostgreSQL, a <emphasis>database</emphasis> is the physical
        representation of structured data. Or in other words, the files that
        the PostgreSQL RDBMS (Relational Database Management System) uses for
        storing, querying and manipulating the related data. One or more
        databases are hosted in a PostgreSQL database cluster. A
        <emphasis>database cluster</emphasis> contains all the databases that
        a PostgreSQL instance manages.</para>

        <para>PostgreSQL stores all data in the <emphasis>data
        directory</emphasis> or <emphasis>data area</emphasis>.</para>
      </section>

      <section>
        <title>Installing PostgreSQL</title>

        <para/>
      </section>

      <section>
        <title>Preparing PostgreSQL for EJBCA</title>

        <para/>
      </section>
    </section>

    <section>
      <title>EJBCA</title>

      <para>The EJBCA<indexterm>
          <primary>EJBCA</primary>
        </indexterm> software is a certificate management software suite that
      supports CA-like functions for medium to large enterprises.</para>

      <section>
        <title>Installing EJBCA</title>

        <para>TODO</para>
      </section>
    </section>
  </section>
</chapter>
