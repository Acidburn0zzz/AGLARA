<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="network" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Network services</title>

  <section>
    <title>Getting a grip on IP addresses</title>

    <para>When you're dealing with a larg(er) network, you'll quickly run into
    the wonderful challenge of properly defining network segments and the
    allowed interaction between them. I personally like to keep segments based
    on its accessibility: internal business services, management services,
    customer business services, internal users, etc. Based on these
    accessibility patterns it is then easier to define the settings (and
    security measurements) for each.</para>

    <para>Within this reference architecture, I will be using IPv6 (as it
    proves to be a nice exercise, but also to show that IPv6 is not something
    to be afraid of) and a logical way of naming the hosts and services using
    DNS names. In this book, the used DNS names will reflect the function and
    "position" of the services in the architecture, but you are not required
    to follow this. Some organizations even want to keep the naming
    conventions of their services (including DNS) as obscure as possible, not
    to give too much information available when a leak occurs.</para>

    <section>
      <title>Example network segment</title>

      <para>The following code listing gives a high-level impression on the
      network segments identified for use in this book. I will be using the
      IPv6<indexterm>
          <primary>IPv6</primary>
        </indexterm> documentation range (2001:db8::/32) but this too is not
      something you need to follow. If your organization is assigned a proper
      IPv6 block, there is no reason to still use local addresses in your
      organization: the number of IPv6 addresses is
      <emphasis>currently</emphasis> sufficiently large to give each
      server/service in your organization its own address which, through
      routers, gateways and firewalls, is either accessible or not from
      anyplace.</para>

      <figure>
        <title>Example network structure</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/03-networkservices.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>IPv6 Addresses and DNS naming</title>

      <para>As we will be using IPv6, a quick run-down of how our network will
      be structured...</para>

      <section>
        <title>IPv6 address scheme</title>

        <para>First, below you'll find an example IPv6 address that could be
        used for a workstation</para>

        <programlisting>2001:0db8:0081:00e2:0000:0204:de89:330f</programlisting>

        <para>In abbreviated form, this becomes</para>

        <programlisting>2001:db8:81:e2::204:de89:330f</programlisting>

        <para>If we use a 64-bit host identifier (which, in IPv6 parlance, is
        called the EUI-64 address) and use the NIC's MAC address (which is 48
        bits), this means that our address can be seen roughly as
        follows:</para>

        <programlisting>2001:0db8:0081:00e2:0000:0204:de89:330f
&lt;------+------&gt;&lt;-+-&gt;&lt;--------+---------&gt;
       |         |           `- 64 bits host identifier
       |         `- 16 bits subnetwork identifier
       `- 48 bits prefix</programlisting>

        <para>In this case,</para>

        <itemizedlist>
          <listitem>
            <para>2001:db8:81 is the prefix assigned to us by our ISP</para>
          </listitem>

          <listitem>
            <para>00e2 is our 16-bits subnet identifier (which we use to
            "regulate" our internal segmentation)</para>
          </listitem>

          <listitem>
            <para>0000:0204:de89:330f is our host identification (which is the
            MAC address + "0000" as padding to make it 64-bit wide).</para>
          </listitem>
        </itemizedlist>

        <para>This gives us plenty of room to create network segmentation
        rules. So for the remainder of this book, we will use the following
        subnet scheme. I have little experience with network segmentation
        rules or design, so if I'm totally missing a point somewhere here,
        please do tell me - I'm eager to learn more about this.</para>

        <itemizedlist>
          <listitem>
            <para>The first 4 bits are set to 0 (and left as a possible
            extension later)</para>
          </listitem>

          <listitem>
            <para>The next 4 bits provide feedback on the environment:
            production (0), testing (1) or lab (2)</para>
          </listitem>

          <listitem>
            <para>The next 4 bits give information about the system or device
            purpose. For instance, networking device (0), storage device (1),
            management server (2), business server (3), DMZ (8), workstation
            VPN (c), portable device (d), internal workstation (e)</para>
          </listitem>

          <listitem>
            <para>The last 4 bits are used for subnets within the defined
            location</para>
          </listitem>
        </itemizedlist>

        <para>So the subnetwork identifier 00e2 given earlier gives us a
        production internal workstation on subnet "2".</para>
      </section>

      <section>
        <title>DNS Naming</title>

        <para>We will use logical names for our components. The domain
        "genfic.com" is used for the organization, "internal.genfic.com" is
        for all internal services.</para>

        <para>For instance, la00010.workstation.internal.genfic.com is an
        internal workstation; rtr01e2.network.internal.genfic.com is a router
        for the network, etc. I just let my imagination free - but keep the
        names consistent so that, if I talk about a server called
        gc01n01.virt.internal.genfic.com, it doesn't make you frown when I say
        it is the ganeti cluster 01, node 01 within the production virtualized
        network of the organization.</para>
      </section>
    </section>
  </section>

  <section>
    <title>DNS</title>

    <para>So with our IP address range in place and a imaginative domain name
    structure in place, let's start the setup of our next component -
    DNS<indexterm>
        <primary>DNS</primary>
      </indexterm>.</para>

    <section>
      <title>Domain name servers</title>

      <para>Many organizations will host their own domain name servers. In our
      reference architecture, we will be using BIND, although I am hoping to
      support djbdns very soon (as a worthy opponent to the tried and true
      BIND<indexterm>
          <primary>BIND</primary>
        </indexterm>). The djbdns implementation has very positive critics,
      both regarding ease of use, performance as well as security. However,
      its main downside currently is that it doesn't fully support IPv6 yet -
      most functionality is supported, but as long as things like dnstrace,
      NS/MX records etc. do not support IPv6, I will be using BIND.</para>

      <section>
        <title>On BIND</title>

        <para>On the Internet, Berkeleys Internet Name Domain (BIND) server is
        the most popular DNS server to date. It has been plagued by its set of
        security issues, but is still very well supported on Gentoo (and
        other) platforms. The software was originally developed at Berkeley in
        the early 80s in an open source model. Since 2010, the software is
        maintained by the Internet Systems Consortium.</para>

        <para>Because it has such a large history, it has also seen quite a
        few updates and even rewrites. The current major version (BIND 9) is a
        rewrite that was tailored to answer the various secrity-related
        concerns that came from earlier versions. Sadly, even BIND 9 has seen
        its set of security vulnerabilities. Although a new major is in the
        making (BIND 10) it is not expected to be released anytime
        soon.</para>

        <para>To support a higher security within BIND, we will of course be
        running it confined within a SELinux domain and using chroot (which,
        together with grSecurity's chroot restrictions, offer a fairly good
        jail for this service). I am not enabling DNSSEC currently though -
        that might follow in the (near) future.</para>
      </section>

      <section>
        <title>Chrooted master-slave architecture</title>

        <para>Naming services are an important part in an architecture. If
        your systems cannot resolve a hostname to an IP address, they will
        most likely not function correctly. We will implement a master-slave
        architecture, but where we can "upgrade" the slave to the master role
        if necessary. We will be using BIND's master/slave functionality,
        chrooted into <filename>/var/named/chroot</filename>.</para>

        <figure>
          <title>High-level BIND architecture</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/03-BIND.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>For the BIND architecture, we see the following feeds or
        activities involved:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>XFER-PULL</emphasis> is initiated from the
            secundary name server (the slave) which periodically connects to
            the master to get changes on the zone files</para>
          </listitem>

          <listitem>
            <para><emphasis>SIGNAL-XFER</emphasis> is initiated by the master
            name server and is a feature in BIND9 to signal its slave servers
            when changes have occurred</para>
          </listitem>

          <listitem>
            <para><emphasis>CMDB-FEED</emphasis> is a file transfer initiated
            from the central configuration management system (Puppet) which
            contains node information (IP address versus expected hostname and
            domain name) and is used to locally regenerate the zone
            files.</para>
          </listitem>
        </itemizedlist>

        <para>We explicitly mention the system logger here as it will be
        configured to read log entries from the log socket in the chrooted
        environment.</para>
      </section>

      <section>
        <title>Installing bind</title>

        <para>First, install net-dns/bind.</para>

        <programlisting># <command>emerge net-dns/bind net-dns/bind-tools</command>
# <command>rc-update add named default</command></programlisting>

        <para>Next, edit <filename>/etc/conf.d/named</filename> and set the
        CHROOT variable. Make sure that this destination directory doesn't
        exists, or is empty otherwise. Also set CHROOT_NOMOUNT as we will be
        manging the files directly inside the chroot:</para>

        <programlisting>CHROOT="/var/named/chroot"
CHROOT_NOMOUNT="1"</programlisting>

        <para>Finally, we will set up the chroot environment so that BIND can
        run in it. Now, our friendly package maintainer at Gentoo has made
        this easier for non-SELinux users:</para>

        <programlisting># <command>emerge --config =net-dns/bind-9.8.1_p1</command></programlisting>

        <para>With SELinux enabled though, you either need to (temporarily)
        allow the following privileges:</para>

        <programlisting>## SELinux allow rule
allow portage_t var_t:chr_file { create getattr setattr };</programlisting>

        <para>or you can opt to temporarily run portage_t in permissive
        mode:</para>

        <programlisting># <command>semanage permissive -a portage_t</command>
(... run emerge --config ...)
# <command>semanage permissive -d portage_t</command></programlisting>

        <para>This will prepare the chroot for you. Finish off by resetting
        the right SELinux file contexts on the chroot:</para>

        <programlisting># <command>setfiles -r /var/named/chroot /etc/selinux/strict/contexts/files/file_contexts /var/named/chroot</command></programlisting>

        <para>At the end of the steps, emerge will ask you to edit your system
        logger configuration to capture logging events from the chrooted
        environment as well.</para>

        <programlisting># <command>vim /etc/syslog-ng/syslog-ng.conf</command>
(... Add the next line ...)
source jail { unix-stream("/var/named/chroot/dev/log"); };</programlisting>
      </section>

      <section>
        <title>Initial configuration</title>

        <para>We will start with an initial configuration of BIND.</para>

        <para>Let's start with
        <filename>/var/named/chroot/etc/bind/named.conf</filename><indexterm>
            <primary>named.conf</primary>
          </indexterm>:</para>

        <programlisting>options {
  directory "/var/bind";
  pid-file "/var/run/named/named.pid";
  statistics-file "/var/run/named/named.stats";
  listen-on { 127.0.0.1; };
  listen-on-v6 { 2001:db8:81:21::ac:98ad:5fe1; };
  allow-query { any; };
  zone-statistics yes;
  allow-transfer { 2001:db8:81:22::ae:6b01:e3d8; };
  notify yes;
  recursion no;
  version "[nope]";
};

# Access to DNS for local addresses (i.e. genfic-owned)
view "local" {
  match-clients { 2001:db8:81::/48; };
  recursion yes;
  zone "genfic.com" { type master; file "pri/com.genfic"; };
  zone "1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa" { type master; file "pri/inv.com.genfic"; };
};</programlisting>

        <para>That's it. The configuration will have this installation work as
        the master DNS server and will (only) accept DNS requests from IPv6
        addresses within our IP range. For these requests, we use the
        <filename>pri/com.genfic</filename> file (which is our "zone" file
        that will contain the DNS records) and
        <filename>pri/inv.com.genfic</filename>" for the reverse lookups. We
        will also create a cache</para>

        <para>For the slave server, the setup is fairly similar:</para>

        <itemizedlist>
          <listitem>
            <para>do not set the <parameter>allow-transfer</parameter> though.
            It is a slave server.</para>
          </listitem>

          <listitem>
            <para>set the type of the zone's to "<parameter>slave</parameter>"
            instead and add in <userinput>masters {
            2001:db8:81:21::ac:98ad:5fe1; }</userinput> to each zone. That
            will tell BIND what the master is of this particular zone.</para>
          </listitem>
        </itemizedlist>

        <para>Finally, set the initial zone files for the organization.</para>

        <programlisting># <command>cat /var/named/chroot/var/bind/pri/com.genfic</command>
$TTL 1h ;
$ORIGIN genfic.com.
@       IN      SOA     ns.genfic.com. ns.genfic.com. (
                        2012041101
                        1d      
                        2h
                        4w
                        1h )

        IN      NS      ns.genfic.com.
        IN      NS      ns2.genfic.com.
        IN      MX      10      mail.genfic.com.
        IN      MX      20      mail2.genfic.com.

genfic.com.     IN      AAAA    2001:db8:81:80::dd:13ed:c49e;
ns              IN      AAAA    2001:db8:81:21::ac:98ad:5fe1;
ns2             IN      AAAA    2001:db8:81:22::ae:6b01:e3d8;
www             IN      CNAME   genfic.com.;
mail            IN      AAAA    2001:db8:81:21::b0:0738:8ad5;
mail2           IN      AAAA    2001:db8:81:22::50:5e9f:e569;
; (...)</programlisting>

        <programlisting># <command>cat /var/named/chroot/var/bind/pri/inv.com.genfic</command>
$TTL 1h ;
@       IN      SOA     1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa ns.genfic.com. (
                        2012041101
                        1d
                        2h
                        4w
                        1h )

        IN      NS      ns.genfic.com.
        IN      NS      ns2.genfic.com.

$ORIGIN 1.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.

1.e.f.5.d.a.8.9.c.a.0.0.0.0.0.0.1.2.0.0         IN      PTR     ns.genfic.com.
8.d.3.e.1.0.b.6.e.a.0.0.0.0.0.0.2.2.0.0         IN      PTR     ns2.genfic.com.
; (...)</programlisting>
      </section>

      <section>
        <title>Automatically generating zone files</title>

        <para>Managing the zone files can be done using regular text files,
        but for larger environments, it is interesting to have an interface
        that does it for you. Later in the reference architecture, we will be
        setting up a central management location for our server management.
        This central configuration management database (well, it might not be
        a database by itself, but the term is correct) will be used to
        automatically generate zone files and push them to the name
        servers.</para>
      </section>
    </section>

    <section>
      <title>Using bind</title>

      <para>The bind server is started as an init script.</para>

      <programlisting># <command>rc-service named start</command></programlisting>

      <section>
        <title>Validating configurations</title>

        <para>The installed utilities can help you troubleshoot configuration
        issues.</para>

        <para>The <command>named-checkconf</command> tool will verify the
        syntax of your named.conf file and report any issues it finds.</para>

        <para>With <command>named-checkzone</command>, you can validate the
        syntax of your zone files.</para>
      </section>

      <section>
        <title>Checking named results</title>

        <para>A good tool to query your name servers (to make sure they
        function correctly) is dig.</para>

        <para>First, let's see if the name server is up and running:</para>

        <programlisting># <command>ping6 -n -c 1 ns.genfic.com</command></programlisting>

        <para>If the host resolves (locally) and replies, then at least your
        local network is working. Let's query the name server then, asking for
        the IP address of mail.genfic.com:</para>

        <programlisting># <command>dig @ns.genfic.com mail.genfic.com AAAA</command></programlisting>

        <para>To get a reverse lookup, use -n -x:</para>

        <programlisting># <command>dig -x 2001:db8:81:22::ae:6b01:e3d8 @ns.genfic.com </command></programlisting>

        <para>If you do not want to see all the output of dig, but just the
        answer, add in "+short".</para>

        <programlisting># <command>dig mail.genfic.com AAAA @ns.genfic.com +short</command>
2001:db8:81:21:0:b0:738:8ad5</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>DHCP</title>

    <para>When you have systems that require dynamically allocated IP
    addresses, you will need a DHCP service.</para>

    <para>DHCP<indexterm>
        <primary>DHCP</primary>
      </indexterm> stands for Dynamic Host Configuration Protocol and is the
    de-facto standard for dynamic IP allocation. In our architecture, we will
    be using DHCP for the workstations, VPN and other devices that are in the
    "bring your own device" pool, because all those devices might be started
    on different locations and as such are difficult to manage with fixed IP
    addresses.</para>

    <section>
      <title>DHCP Architecture</title>

      <para>Within our architecture, we will be positioning two DHCP servers
      internally, in an active/standby setup. Because ISC's DHCP (which we
      will use here) does not support high-available mode for IPv6 yet, we are
      forced to use a "standard" setup. When ISC supports failover mode for
      IPv6 as well, I will update the architecture accordingly.</para>

      <para>We also implement DHCP relay daemons within the target subnets
      where the workstations and other devices will need one.</para>

      <section>
        <title>General architecture</title>

        <para>The next figure displays the general architecture being put in
        place for our needs.</para>

        <figure>
          <title>General DHCP architecture</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/03-dhcp.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The given architecture is fairly simple:</para>

        <itemizedlist>
          <listitem>
            <para>The workstation requests a dynamic IP address
            (<emphasis>DHCP-REQ</emphasis>) which gets captured by the relay
            server.</para>
          </listitem>

          <listitem>
            <para>The relay server forwards the request
            (<emphasis>DHC-FWD</emphasis>) to the DHCP servers. They
            eventually complete the DHCP handshake through the relay
            server</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Installation and configuration</title>

      <para>The installation and configuration of DHCP is fairly simple and,
      similar to BIND, uses flat files for its configuration.</para>

      <section>
        <title>Installation</title>

        <para>First install the DHCP server. We will use ISC's DHCP server
        here.</para>

        <programlisting># <command>emerge dhcp</command></programlisting>

        <para>Do the same on the relay servers. We will, however, not start
        the main server there but the relay service only.</para>

        <para>Next, edit <filename>/etc/conf.d/dhcpd</filename> to configure
        the DHCP daemon to use IPv6.</para>

        <programlisting># <command>cat /etc/conf.d/dhcpd</command>
DHCPD_OPTS="-6"</programlisting>
      </section>

      <section>
        <title>Master DHCP server</title>

        <para>On the master DHCP server, configure the
        <filename>/etc/dhcp/dhcpd.conf</filename> file similar to the
        following:</para>

        <programlisting># <command>cat /etc/dhcp/dhcpd.conf</command>
ddns-update-style interim;

authorative;

default-lease-time 600;
max-lease-time 7200;

subnet6 2001:db8:81:e2::/64 {
  range6 2001:db8:81:e2::f00 2001:db8:81:e2::fff;
  option dhcp6.name-servers 2001:db8:81:21::ac:98ad:5fe1, 2001:db8:81:22::ae:6b01:e3d8;
  option dhcp6.domain-search "workstation.internal.genfic.com";
}

subnet6 2001:db8:81:21::/64 {
  # Empty but must be declared so DHCPd starts
}</programlisting>

        <para>Finally, start the service and register it to automatically
        start during boot.</para>

        <programlisting># <command>rc-update add dhcpd default</command>
# <command>rc-service dhcpd start</command></programlisting>

        <para>Our secundary system will have a similar setup, but will use a
        separate range (say :1000 to :10ff).</para>
      </section>

      <section>
        <title>Relay services</title>

        <para>When you configure a relay service, edit
        <filename>/etc/conf.d/dhcrelay</filename> and set the DHCRELAY_OPTS
        accordingly.</para>

        <programlisting># <command>cat /etc/conf.d/dhcrelay</command>
DHCRELAY_OPTS="-6 -l eth0 -u 2001:db8:81:21::f4:3303:40f4%eth0 -u 2001:db8:81:22::5f:3853:fe78%eth0"</programlisting>

        <para>You also need to edit <filename>/etc/init.d/dhcrelay</filename>
        currently as it forces two options that are only valid for
        IPv4:</para>

        <programlisting># <command>vim /etc/init.d/dhcrelay</command>
(... 1. look for $(printf " -i %s" ${IFACE}) and delete it ...)
(... 2. look for DHCRELAY_SERVERS and remove it ...)
(... End result should be something like:)
start-stop-daemon --start --exec /usr/sbin/dhcrelay \
  -- -q ${DHCRELAY_OPTS}</programlisting>

        <para>Then start up the relay service and make sure it starts at boot
        time as well.</para>

        <programlisting># <command>rc-update add dhcrelay default</command>
# <command>rc-service dhcrelay start</command></programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Resources</title>

    <para>IP addresses, segmentation and IPv6:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.sans.org/reading_room/whitepapers/hsoffice/design-secure-network-segmentation-approach_1645">Design
        Secure Network Segmentation Approach</link>, article on SANS</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://ipv6.com/articles/general/IPv6-Addressing.htm">IPv6
        Addressing</link> (IPv6.com)</para>
      </listitem>
    </itemizedlist>

    <para>On ISC BIND:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://en.gentoo-wiki.com/wiki/BIND">BIND</link>
        (Gentoo-wiki.com)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.zytrax.com/books/dns/ch7/xfer.html">DNS BIND
        Zone Transfers and Updates</link> (Zytrax.com)</para>
      </listitem>
    </itemizedlist>

    <para>On ISC DHCP:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.madboa.com/geek/dhcp-failover/">High-available
        DHCP with failover</link> (IPv4 only) (Madboa.com)</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
