<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="databaseserver"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Database Server</title>

  <section>
    <title>Introduction</title>

    <para>Databases are a prime subject for storing structured data. Be it as
    a backend for an LDAP system or DNS system, or as a structured storage for
    user data, or your most vital company secrets - databases offer a
    standardized method for storing and retrieving data. Thanks to wide driver
    support, many tools can interact with several database types (Oracle, SQL
    Server, PostgreSQL, MySQL, ...).</para>

    <para>Databases are often, from an operating system point of view, not all
    that complicated: a few processes and some files are accessed. However,
    internally, this is an entire different story. Databases are a world by
    itself - you will need trained professionals to properly manage your
    database systems (DBAs, DataBase Administrators) who know the internals of
    the database product and can tune the database to react swiftly to the
    requests launched against it.</para>

    <para>In this section, we focus on the setup of PostgreSQL and
    MySQL.</para>
  </section>

  <section>
    <title>PostgreSQL</title>

    <para>Although (somewhat) less popular than MySQL, the PostgreSQL database
    is in the author's (humble) opinion a more stable and successful database
    platform. It is gaining momentum with vendors and has commercial backing
    by several companies - just in case you are in dire need for paying for
    software ;-)</para>

    <section>
      <title>Architecture</title>

      <para>Basically, postgresql is an almost monolithic system from a
      Unix/Linux point of view: not that many processes are involved. Of
      course, internally, that is a completely different thing.</para>

      <para>Let's first look at how we would position the database in the
      reference architecture used in this book.</para>

      <figure>
        <title>Load balanced setup</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/07-postgres-loadbalance.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>What we are aiming for is a high-available PostgreSQL solution:
      two (or more) PostgreSQL databases of which one is a master (we are not
      going to look for multi-master setups, even though they do exist) and
      where at least one target is synchronously replicated towards. The
      synchronous replication is needed to ensure that, in case of system
      failure, the standby database already holds the last successful commit
      and can be made master easily.</para>

      <para>In front of the database setup, a load balancer is placed which
      has two main functions:</para>

      <itemizedlist>
        <listitem>
          <para>distribute read-only queries to the standby systems as well,
          lowering the load on the master database</para>
        </listitem>

        <listitem>
          <para>provide seamless fail-over towards the standby database so
          applications do not notice the (short) interruption on the database
          service</para>
        </listitem>
      </itemizedlist>

      <para>To accomplish this, we will set up two PostgreSQL systems with hot
      standby, and a pgpool load balancer in front of it.</para>

      <section>
        <title>Feeds and flows - backup</title>

        <para>There are two main flows identified in our architecture: backup
        and replication. Let's first take a look at the backup on.</para>

        <para>Backups should be stored somewhere outside the direct vicinity
        of the database (different site even). We will use the pg_rman
        application and use an NFS mount to place the backup catalog (metadata
        about backups) and backed up files.</para>

        <figure>
          <title>Backup architecture for a PostgreSQL setup</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/07-postgres-backup.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Feeds and flows - Replication</title>

        <para>Next to the backup/restore, we also define standby databases. In
        this case, the needed WAL logs (translation logs of PostgreSQL) are
        shipped towards the standby systems.</para>

        <figure>
          <title>Standby setups</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/07-postgres-standby.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>In the depicted scenario, a standby server is receiving the
        archive logs and, depending of the type of standby,</para>

        <itemizedlist>
          <listitem>
            <para>waits (keeps logs on the file system) until the standby is
            started (for instance due to a fail-over), or</para>
          </listitem>

          <listitem>
            <para>immediately applies the received WAL logs</para>
          </listitem>
        </itemizedlist>

        <para>If a standby waits, it is called a <filename>warm
        standby</filename>. If it immediately applies the received WAL logs,
        it is a <filename>hot standby</filename>. In case of a hot standby,
        the database is also open for read-only access. There are also methods
        for creating multi-master PostgreSQL clusters. In our presented
        architecture, the hot standby even has to signal to the master that it
        has received and applied the log before the commit is returned as
        successful to the client.</para>

        <para>Of course, if you do not need this kind of protection on the
        database, it is best left disabled as it incurs a performance
        penalty.</para>
      </section>

      <section>
        <title>Administration</title>

        <para>PostgreSQL administration is mostly done using the
        <command>psql</command><indexterm>
            <primary>psql</primary>
          </indexterm> command and related <command>pg_*</command>
        commands.</para>
      </section>

      <section>
        <title>Monitoring</title>

        <para>When monitoring PostgreSQL, we should focus on process
        monitoring and log file monitoring.</para>
      </section>

      <section>
        <title>Operations</title>

        <para>When you are responsible for managing PostgreSQL systems, then
        you will need to understand the internal architecture of
        PostgreSQL.</para>

        <figure>
          <title>Internal architecture for PostgreSQL</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/07-postgresql.png" scalefit="0"
                         width="100%"/>
            </imageobject>
          </mediaobject>

          <para>The master postgres server process listens on the PostgreSQL
          port, waiting for incoming connections. Any incoming connection is
          first checked against the settings in the Host Based Access
          configuration file (<filename>pg_hba.conf</filename><indexterm>
              <primary>pg_hba.conf</primary>
            </indexterm>). Only if this list allows the connection will it go
          through towards the postgres database, where the rights granted to
          the user then define what access is allowed.</para>
        </figure>
      </section>

      <section>
        <title>User management</title>

        <para>PostgreSQL supports a wide number of authentication methods,
        including PAM support (Pluggable Authentication Modules), GSSAPI
        (including the Kerberos one), RADIUS, LDAP, etc. However, it is
        important to know that this is only regarding authentication, not
        authorization. In other words, you still need to create the roles
        (users) in the PostgreSQL server and grant them whatever they
        need.</para>

        <para>Central user management in this case ensures that, if a person
        leaves the organization, his account can be immediately removed (or
        locked) so that authenticating as this user against the databases is
        no longer possible. However, you will still need a method for cleaning
        up the role definitions in the databases.</para>
      </section>

      <section>
        <title>Security</title>

        <para/>
      </section>
    </section>

    <section>
      <title>Deployment and uses</title>

      <section>
        <title>Manual installation of the database server</title>

        <para>We start by installing the
        <package>dev-db/postgresql-server</package> package on the
        system.</para>

        <programlisting># <command>emerge dev-db/postgresql-server</command></programlisting>

        <para>Next, edit the /etc/conf.d/postgresql-9.1 file to accommodate
        the settings of the cluster.</para>

        <programlisting>PGDATA="/etc/postgresql-9.1"
DATA_DIR="/var/lib/postgresql/9.1/data"
PG_INITDB_OPTS="--locale=en_US.UTF-8"</programlisting>

        <para>Now, create the cluster: temporarily assign a password to the
        postgres user (it will be asked during the configuration), and
        afterwards lock the account again.</para>

        <programlisting># <command>passwd postgres</command>
# <command>emerge --config dev-db/postgresql-server:9.1</command>
# <command>passwd -l postgres</command>
# <command>restorecon -Rv /var/lib/postgresql/9.1/data</command></programlisting>

        <para>To secure the cluster, we need to edit its configuration files
        before starting.</para>

        <para>Let's first make sure that we can connect to the database
        remotely too (by default, it only works locally). Edit the
        <filename>postgresql.conf</filename> file (in
        /<filename>etc/postgresql-9.1</filename>) and set the listen_addresses
        to the interface(s) you want the database to be reachable on.</para>

        <programlisting>listen_addresses=::1 2001:db8:81::204:de89:3312</programlisting>

        <para>Next, edit pg_hba.conf to allow remote connections for
        IPv6:</para>

        <programlisting>host    all     all      2001:db8:81::1/96    md5</programlisting>

        <para>Start the cluster and set the admin password:</para>

        <programlisting># <command>rc-service postgresql-9.1 start</command>
# <command>psql -U postgres</command>
postgres=# <command>\password</command>
postgres=# <command>\q</command></programlisting>

        <para>With the password set, change the method in pg_hba.conf for the
        local (socket-based) connections from trust to password and reload the
        service</para>

        <programlisting># <command>rc-service postgresql-9.1 reload</command></programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>MySQL</title>

    <para>The MySQL database platform is a very popular database, especially
    for web-based applications. Many software titles support MySQL as a
    database backend natively, so it makes sense to provide support for MySQL
    in our reference architecture as well.</para>

    <section>
      <title>Architecture</title>

      <para/>
    </section>

    <section>
      <title>Deployment and uses</title>

      <para>The initial setup of MySQL on Gentoo is a breeze. Install the
      <command>dev-db/mysql</command> package on your system and you're good
      to go. Next, make sure that the following entries are set in your
      /etc/mysql/my.cnf file:</para>

      <itemizedlist>
        <listitem>
          <para>local-infile=0 (in the [mysqld] section) to disable loading
          data from a local file from within MySQL</para>
        </listitem>
      </itemizedlist>

      <para>Furthermore, secure the environment through the following
      actions:</para>

      <itemizedlist>
        <listitem>
          <para>Look in all users' home directories for a file called
          .mysql_history, and remove it. Next, create a symlink to /dev/null
          called .mysql_history. This is because the history file contains the
          history of all commands executed, which can include sensitive
          information.</para>
        </listitem>
      </itemizedlist>

      <para>Now, create the initial database with
      <command>mysql_install_db</command> and start the database:</para>

      <programlisting># <command>rc-service mysql start</command></programlisting>

      <para>Then, call <command>mysql_secure_installation</command> to
      properly secure the database further.</para>
    </section>

    <section>
      <title>User management</title>

      <para>Currently, MySQL uses internal tables for managing user accounts.
      Work is on the way to support other authentication services, like LDAP,
      using the MySQL plugin support. But for now, let's stick with the
      internal user tables.</para>

      <para>For database users, I always tend to make distinction between
      (personal) accounts and (functional) application accounts.</para>

      <itemizedlist>
        <listitem>
          <para>Personal accounts are tied to a single person, and might even
          have DBA (or at least more) privileges</para>
        </listitem>

        <listitem>
          <para>Functional application accounts are tied to an application
          server (or set of servers) and are used to access the database
          data</para>
        </listitem>
      </itemizedlist>

      <para>Making the distinction is pretty much for security reasons, but
      also because functional accounts might be better off with a different
      authentication approach.</para>

      <section>
        <title>Authentication methods</title>

        <para>By default, MySQL uses password-based authentication (with the
        hashes of the database stored in the mysql.user table). The field is a
        SHA1 checksum of the binary representation of the SHA1 checksum of the
        password. For instance, if the password is "password", then you can
        generate the hash from the command line as follows:</para>

        <programlisting>$ <command>echo -n password | openssl dgst -sha1 -binary | sha1sum</command></programlisting>

        <para>Or you can use the mysql function:</para>

        <programlisting>mysql&gt; <command>SELECT PASSWORD('password');</command></programlisting>

        <para>Knowing how the hash works also allows you to manage the hashes
        remotely if you want.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Resources</title>

    <para>For more information, many excellent resources are available on the
    wide Internet.</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="https://code.google.com/p/pg-rman/">pg_rman</link>, the
        backup/restore utility used in this chapter</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
