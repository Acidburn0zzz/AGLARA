<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Platform selection</title>

  <section>
    <title>Gentoo Linux</title>

    <para>Within the reference architecture, we standardize on Gentoo Linux.
    Standardization on a single platform is needed to keep costs sufficiently
    low, but also offers the advantage that you can use solutions specific for
    this platform, rather than having to look for solutions that must support
    a multitude of platforms. Of course, the choice of picking Gentoo Linux
    here might seem weird - why not CentOS (as that has a possible commercial
    backing towards RedHat Enterprise Linux when needed)?</para>

    <itemizedlist>
      <listitem>
        <para>First of all - I'm a Gentoo Linux developer. Its the
        distribution I know the best.</para>

        <para>But in light of our fictional company, it might also be because
        its current (fictional) engineers are all Gentoo Linux developers, or
        because it has ties with regional Gentoo Linux supporting
        services.</para>
      </listitem>

      <listitem>
        <para>The reason to use CentOS (RHEL) could be to have certified
        hosting of certain products which are only supported on RHEL (or
        similar). However, because we will only use free software solutions,
        this requirement is not valid in our case.</para>
      </listitem>

      <listitem>
        <para>Gentoo Linux offers a minimalistic approach on supported
        features. Thanks to a good balance of USE flags, we can install
        servers and services that offer just those services we need, without
        any additional dependencies or features that we will have to disable
        (in order to secure the services) anyhow. This leads to somewhat
        better performance, but also to a saving in storage requirements,
        patching frequency, etc.</para>
      </listitem>
    </itemizedlist>

    <para>Of course, because this book is called "A Gentoo Linux Advanced
    Reference Architecture", it would be weird to have it talk about another
    distribution, wouldn't it?</para>
  </section>

  <section>
    <title>x86_64 architecture</title>

    <para>We will standardize on the x86_64 architecture (or in Gentoo's
    terms, amd64), partially because it is the widest known in the Gentoo
    Linux development community, but also because its hardware is widely
    available and sufficiently cheap. The company might in the future invest
    in ARM as well (as it has good potential, better power consumption ratios,
    etc.) but for now, we will focus on x86_64 only.</para>

    <para>That being said, we'll also use the no-multilib approach in Gentoo
    Linux. Systems need to be fully x86_64 driven, partially for
    standardization as well, but also to make debugging easier. The fewer
    special cases you need to think about, the faster you can resolve
    problems. Generally though, this gives little (to no) additinoal advantage
    towards a multilib profile. But as this is a reference architecture, I'll
    stick with this.</para>
  </section>

  <section>
    <title>Gentoo Hardened</title>

    <para>To increase security of the deployments, all systems will use a
    Gentoo Hardened deployment.</para>

    <para>The features used include:</para>

    <itemizedlist>
      <listitem>
        <para>PaX</para>
      </listitem>

      <listitem>
        <para>PIE/PIC/SSP</para>
      </listitem>

      <listitem>
        <para>SELinux as MAC</para>
      </listitem>

      <listitem>
        <para>grSecurity kernel improvements</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>PaX</title>

      <para>The PaX<indexterm>
          <primary>PaX</primary>
        </indexterm> project (part of grSecurity) aims to update the Linux
      kernel with <link
      xlink:href="http://pax.grsecurity.net/docs/pax.txt">defense
      mechanisms</link> against exploitation of software bugs that allow an
      attacker access to the software's address space (memory). By exploiting
      this access, a malicious user could introduce or execute arbitrary code,
      execute existing code without the applications' intended behavior, or
      with different data than expected.</para>

      <para>One of the defence mechanisms introduced is NOEXEC<indexterm>
          <primary>NOEXEC</primary>
        </indexterm>. With this enabled, memory pages of an application cannot
      be marked writeable and executable. So either a memory page contains
      application code, but cannot be modified (kernel enforced), or it
      contains data and cannot be executed (kernel enforced). The enforcement
      methods used are beyond the scope of this book, but are described <link
      xlink:href="http://pax.grsecurity.net/docs/noexec.txt">online</link>.
      Enforcing NOEXEC does have potential consequences: some applications do
      not work when PaX enforces this behavior. Because of this, PaX allows
      administrators to toggle the enforcement on a per-binary basis. For more
      information about this, see the Hardened Gentoo PaX Quickstart document
      (see resources at the end of this chapter). Note that this also requires
      PIE/PIC built code (see later).</para>

      <para>Another mechanism used is ASLR<indexterm>
          <primary>ASLR</primary>
        </indexterm>, or Address Space Layout Randomization. This thwarts
      attacks that need advance knowledge of addresses (for instance through
      observation of previous runs). With ASLR enabled, the address space is
      randomized for each application, which makes it much more difficult to
      guess where a certain code (or data) portion is loaded, and as such
      attacks will be much more difficult to execute succesfully. This
      requires the code to be PIE built.</para>

      <para>To enable PaX, you will need to install the hardened-sources
      kernel in Gentoo Linux and configure it according to the instructions
      found on the Hardened Gentoo PaX Quickstart document. You should also
      install <command>paxctl</command><indexterm>
          <primary>paxctl</primary>
        </indexterm>.</para>

      <programlisting># <command>emerge hardened-sources</command>
# <command>emerge paxctl</command></programlisting>
    </section>

    <section>
      <title>PIE/PIC/SSP</title>

      <para>The given abbreviations describe how source code is built into
      binary, executable code.</para>

      <para>PIC<indexterm>
          <primary>PIC</primary>
        </indexterm> (Position Independent Code) is used for shared libraries
      to support the fact that they are loaded in memory dynamically (and
      without prior knowledge to the addresses). Whereas older methods use
      load-time relocation (where address pointers are all rewritten the
      moment the code is loaded in memory), PIC uses a higher abstraction of
      indirection towards data and function references. By building shared
      objects with PIC, relocations in the text segment in memory (which
      contains the application code) are not needed anymore. As such, these
      pages can be marked as non-writeable.</para>

      <para>To find out if you have libraries that still support text
      relocations<indexterm>
          <primary>text relocation</primary>
        </indexterm>, you can install the pax-utils package and scan your
      libraries for text relocations:</para>

      <programlisting># <command>emerge pax-utils</command>
$ <command>scanelf -lpqt</command>
TEXTREL  /opt/Citrix/ICAClient/libctxssl.so</programlisting>

      <para>In the above example, the libctxssl.so file is not built with PIC
      and as such could be more vulnerable to attacks as its code-containing
      memory pages might not be marked as non-writeable.</para>

      <para>With PIE<indexterm>
          <primary>PIE</primary>
        </indexterm> (Position Independent Executables) enabled, executables
      are built in a fashion similar to shared objects: their base address can
      be relocated and as such, PaX' ASLR method can be put in effect to
      randomize the address in use. An application binary that is PIE-built
      will show up as a shared object file rather than an executable file when
      checking its ELF header</para>

      <programlisting>$ <command>readelf -h /bin/ls | grep Type</command>
  Type:            DYN (Shared object file)

$ <command>readelf -h /opt/Citrix/ICAClient/wfcmgr.bin | grep Type</command>
  Type:            EXEC (Executable file)</programlisting>

      <para>SSP<indexterm>
          <primary>SSP</primary>
        </indexterm> finally stands for Stack Smashing Protection. Its purpose
      is to add in additional buffers after memory allocations (for variables
      and such) which contain a cryptographic marker (often called the
      canary). When an overflow occurs, this marker is also overwritten (after
      all, that's how overflows work). When a function would return, this
      marker is first checked to see if it is still valid. If not, then an
      overflow has occurred and the application is stopped abruptly. </para>
    </section>

    <section>
      <title>SELinux as MAC</title>

      <para>With a MAC<indexterm>
          <primary>MAC</primary>
        </indexterm> (Mandatory Access Control<indexterm>
          <primary>Mandatory Access Control</primary>
        </indexterm>), the system administrator can control which accesses are
      allowed and which not, and can enforce that the user cannot override
      this. Regular access patterns in Linux are discretionary, so the user
      can define this himself. In this book, we will use SELinux<indexterm>
          <primary>SELinux</primary>
        </indexterm> as the MAC system. Another supported MAC in Gentoo
      Hardened is grSecurity's RBAC model.</para>

      <para>Installing and configuring Hardened Gentoo with SELinux is
      described in the Gentoo SELinux handbook. It is seriously recommended to
      read through this resource a few times, as SELinux is not just about
      enabling a feature - it is a change in the security model and requires
      experience with it.</para>
    </section>

    <section>
      <title>grSecurity kernel improvements</title>

      <para>Next to the previously mentioned grSecurity updates, grSecurity
      also adds in additional kernel protection measures. </para>

      <para>This includes additional hardening on chroot jails (to make it a
      lot more difficult to break out of a chroot) and file system abuse (like
      getting information from pseudo-filesystems to improve attacks).</para>

      <para>For more information on enabling grSecurity, see the Gentoo
      grSecurity v2 Guide.</para>
    </section>
  </section>

  <section>
    <title>Virtualized platforms</title>

    <para>When possible, we will use virtualization. This offers a hardware
    abstraction so that we can move guests from one hardware platform to
    another without having too much impact on the loaded drivers. It also
    supports better availability models (fast recovery when hardware fails)
    and improved resource usage (which benefits our cost efficiency
    again).</para>

    <para>As virtualization platform, we will choose KVM.</para>
  </section>

  <section>
    <title>Resources</title>

    <para>For more information about the topics in this chapter, you can
    divulge yourself in the information available at the following
    resources...</para>

    <para>Gentoo Hardened:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.gentoo.org/proj/en/hardened/pax-quickstart.xml">Hardened
        Gentoo PaX Quickstart</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/">Position
        Independent Code</link> in shared libraries</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.gentoo.org/proj/en/hardened/pic-guide.xml">Introduction
        to Position Independent Code</link> (Gentoo Linux)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://blog.fpmurphy.com/2008/06/position-independent-executables.html">Position
        Independent Executables</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.gentoo.org/proj/en/hardened/selinux/selinux-handbook.xml">Gentoo
        SELinux Handbook</link> (Gentoo Linux)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.gentoo.org/proj/en/hardened/grsecurity.xml">Gentoo
        grSecurity v2 Guide</link> (Gentoo Linux)</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
